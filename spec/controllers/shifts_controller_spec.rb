# require 'spec_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.

# describe ShiftsController do

#   # This should return the minimal set of attributes required to create a valid
#   # Event. As you add validations to Event, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) { { "title" => "MyString" } }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # EventsController. Be sure to keep this updated too.
#   let(:valid_session) { {} }

#   def login_user(user)
#     sign_in user
#   end
#   before (:each) do
#     login_user(FactoryGirl.create(:user))
#     @event = FactoryGirl.create(:event)
#   end

#   describe "GET index" do
#     it "assigns all shifts as @shifts" do
#       shift = Shift.create!, {:event_id => @event.id, :shift => {:title => "Title", :description => "Description", :time => Date.today}}
#       get :index, {:event_id => @event.id}
#       assigns(:shift).should eq([shift])
#     end
#   end

#   describe "GET show" do
#     it "assigns the requested shift as @shift" do
#       shift = Shift.create!, {:event_id => @event.id, :shift => {:title => "Title", :description => "Description", :time => Date.today}}
#       get :show, {}
#       #assigns(:event).should eq(event)
#     end
#   end

#   describe "GET new" do
#     it "assigns a new event as @shift" do
#       get :new, {:event_id => @event.id}
#       #assigns(:shift).should be_a_new(Shift)
#     end
#   end

#   describe "GET edit" do
#     it "assigns the requested shift as @shift" do
#       shift = FactoryGirl.create(:shift)
#       get :edit, {:event_id => @event.id, :id => shift.id}
#       assigns(:event).should eq(event)
#       assigns(:shift).should eq(shift)
#     end
#   end

#   describe "POST create" do
#     describe "with valid params" do
#       it "creates a new Shift" do
#         expect {
#           post :create, {:shift => valid_attributes, :event_id => @event.id}
#         }.to change(@event.shifts, :count).by(1)
#       end

#       it "assigns a newly created event as @event" do
#         post :create, {:shift => valid_attributes, :event_id => @event.id}
#         assigns(:shift).should be_a(Shift)
#         assigns(:shift).should be_persisted
#       end

#       it "redirects to the created event" do
#         post :create, {:shift => valid_attributes, :event_id => @event.id}
#         response.should redirect_to(event_shifts_path(@event))
#       end
#     end

#     describe "with invalid params" do
#       it "assigns a newly created but unsaved event as @event" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         Event.any_instance.stub(:save).and_return(false)
#         post :create, {:event => { "title" => "invalid value" }}
#         assigns(:event).should be_a_new(Event)
#       end

#       it "re-renders the 'new' template" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         Event.any_instance.stub(:save).and_return(false)
#         post :create, {:event => { "title" => "invalid value" }}
#         response.should render_template("new")
#       end
#     end
#   end

#   describe "PUT update" do
#     describe "with valid params" do
#       it "updates the requested event" do
#         shift = FactoryGirl.create(:shift)
#         # Assuming there are no other events in the database, this
#         # specifies that the Event created on the previous line
#         # receives the :update_attributes message with whatever params are
#         # submitted in the request.
#         Shift.any_instance.should_receive(:update_attributes).with({ "title" => "MyString" })
#         put :update, {:id => shift.id, :event_id => @event.id, :shift => { "title" => "MyString" }}
#       end

#       it "assigns the requested event as @event" do
#         event = Event.create! valid_attributes
#         put :update, {:id => shift.id, :event_id => @event.id, :shift => valid_attributes}
#         assigns(:event).should eq(event)
#       end

#       it "redirects to the event" do
#         event = Event.create! valid_attributes
#         put :update, {:id => event.to_param, :event => valid_attributes}
#         response.should redirect_to(event_shifts_path(@event))
#       end
#     end

#     describe "with invalid params" do
#       it "assigns the event as @event" do
#         event = Event.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         Event.any_instance.stub(:save).and_return(false)
#         put :update, {:id => event.to_param, :event => { "title" => "invalid value" }}
#         assigns(:event).should eq(event)
#       end

#       it "re-renders the 'edit' template" do
#         event = Event.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         Event.any_instance.stub(:save).and_return(false)
#         put :update, {:id => event.to_param, :event => { "title" => "invalid value" }}
#         response.should render_template("edit")
#       end
#     end
#   end

#   describe "DELETE destroy" do
#     it "destroys the requested event" do
#       shift = FactoryGirl.create(:shift)
#       expect {
#         delete :destroy, {:event_id => @event.id, :id => shift.id}
#       }.to change(Shift, :count).by(-1)
#     end

#     it "redirects to the events list" do
#       event = Event.create! valid_attributes
#       delete :destroy, {:id => event.to_param}
#       response.should redirect_to(events_url)
#     end
#   end

# end
